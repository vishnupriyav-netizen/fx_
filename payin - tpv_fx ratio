-- payin - ratio
with a_conversion as(
select "from", max(created_at) as last_time from fx_log 
where "to" = 'USD'
group by 1), 

conversion_data as(
select a."from" as from_currency, cast(b.base_rate as decimal(12,10)) as rate_in_usd 
from a_conversion a 
join fx_log b on a.last_time = b.created_at and a."from" = b."from"
),



 all_payins as(
select 
-- a.created_at, a.payin_id,
a.invoice_currency, 
a.charge_currency, 
coalesce(q1.holding_currency, q2.holding_currency) as holding_currency,
c.settlement_currency,

a.total_paid_amount / 100.0 as invoice_amount, 
a.total_paid_amount_ccy / 100.0 as charge_amount,
coalesce(q1.amount / 100.0, q2.amount / 100.0) as holding_amount,
(COALESCE(q1.amount, q2.amount)/ 100.0) * c.final_rate AS settlement_amount

from (select 
b.created_at, a.payin_id, payment_attempt_id, a.invoice_currency, b.charge_currency,
b.total_paid_amount, b.total_paid_amount_ccy
from payin a join payment_attempt b  on a.payin_id = b.payin_id
where date(a.created_at) >= date '2025-01-01' and date(a.created_at) <= date '2025-07-31' and b.status = 'succeeded') a 

left join queue q1 on q1.transaction_reference_id = a.payment_attempt_id 
left join queue q2 on q2.transaction_reference_id = a.payin_id 
left join (select a.queue_id, b.final_rate, b."to" as settlement_currency
from settlement_transaction a join fx_quote b on a.fx_quote_id = b.quote_id) c 
on coalesce(q1.queue_id, q2.queue_id) = c.queue_id),




all_txn as(

SELECT 

'invoice_currency->charge_currency' AS conversion_type,
case when invoice_currency is not null and charge_currency is not null and invoice_currency = charge_currency then 0 else 1 end as fl_converted,
sum(case when invoice_currency = 'USD' then invoice_amount  else cast(invoice_amount * coalesce(rate_in_usd, 1) as decimal(14,2)) end ) as tpv_usd
FROM all_payins mi LEFT JOIN conversion_data cd ON mi.invoice_currency = cd.from_currency GROUP BY 1,2

UNION ALL


SELECT  
'invoice_currency->holding_currency' AS conversion_type,
case when invoice_currency is not null and holding_currency is not null and invoice_currency = holding_currency then 0 else 1 end as fl_converted,
sum(case when invoice_currency = 'USD' then invoice_amount  else cast(invoice_amount * coalesce(rate_in_usd, 1) as decimal(14,2)) end ) as tpv_usd
FROM all_payins mi LEFT JOIN conversion_data cd ON mi.invoice_currency = cd.from_currency GROUP BY 1,2

UNION ALL

SELECT  

'holding_currency->settlement_currency' AS conversion_type,
case when holding_currency is not null and holding_currency is not null and holding_currency = settlement_currency then 0 else 1 end as fl_converted,
sum(case when invoice_currency = 'USD' then invoice_amount  else cast(invoice_amount * coalesce(rate_in_usd, 1) as decimal(14,2)) end ) as tpv_usd
FROM all_payins mi LEFT JOIN conversion_data cd ON mi.invoice_currency = cd.from_currency GROUP BY 1,2
    ) 

SELECT 

conversion_type, fl_converted, tpv_usd FROM all_txn
