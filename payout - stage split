-- payout - ratio 

-- payout: holding, payout, destination.

with a_conversion as(
select "from", max(created_at) as last_time from fx_log 
where "to" = 'USD'
group by 1), 

conversion_data as(
select a."from" as from_currency, cast(b.base_rate as decimal(12,10)) as rate_in_usd 
from a_conversion a 
join fx_log b on a.last_time = b.created_at and a."from" = b."from"
),


-- payout 
payout_calc as (
select payout_id, 
-- currency
a.currency as payout_currency, a.holding_currency, c."to" as destination_currency,
-- amount
a.amount/100.0 as payout_amount, abs(b.amount)/100.0 as holding_amount, (a.amount/100.0)*c.final_rate as destination_amount
from (select * from payout where  date(created_at) >= date '2025-01-01' and  date(created_at) <= date '2025-07-31' and status = 'succeeded' ) a
left join balance_transaction b on a.payout_id = b.reference_id
left join fx_quote c on a.destination_fx_quote_id = c.quote_id
),

-- all_txn

all_transactions as (

-- payout 
select 
'holding_currency->payout_currency' as conversion_type, 
case when holding_currency is not null and payout_currency is not null and
holding_currency = payout_currency then 0 else 1 end as fl_converted,
sum(cast(payout_amount * COALESCE(rate_in_usd, 1) AS DECIMAL(14, 2))) as tpv_usd
from payout_calc a 
left join conversion_data cd on a.payout_currency = cd.from_currency
group by 1,2

union all

select 
'payout_currency->destination_currency' as conversion_type, 
case when destination_currency is not null and payout_currency is not null and
destination_currency = payout_currency then 0 else 1 end as fl_converted,
sum(cast(payout_amount * COALESCE(rate_in_usd, 1) AS DECIMAL(14, 2))) as tpv_usd
from payout_calc a 
left join conversion_data cd on a.payout_currency = cd.from_currency
group by 1,2

)


SELECT conversion_type, fl_converted, tpv_usd
FROM all_transactions;
